#!/bin/bash
# ====================================================================================================================================
# git-push-server-linux-prod-build-and-run-mvn.sh
# AppBrahma back-end server build and run script
# Created by Venkateswar Reddy Melachervu on 15-03-2022.
# Updates:
#   16-03-2022 - Updated for mysql docker terminal spawning and running
#   20-06-2022 - Update for AppBrahma generator sync and https support optimization
#
# (C) Brillium Technologies 2011-2022. All rights reserved.
# ====================================================================================================================================
export RED='\033[0;31m'
export Green='\033[0;32m'        # Green
export Yellow='\033[0;33m'       # Yellow
export Blue='\033[0;34m'         # Blue
export Purple='\033[0;35m'       # Purple
export Cyan='\033[0;36m'         # Cyan
export White='\033[0;37m'        # White
export NC='\033[0m' # No Color

# Bold
export BBlack='\033[1;30m'       # Black
export BRed='\033[1;31m'         # Red
export BGreen='\033[1;32m'       # Green
export BYellow='\033[1;33m'      # Yellow
export BBlue='\033[1;34m'        # Blue
export BPurple='\033[1;35m'      # Purple
export BCyan='\033[1;36m'        # Cyan
export BWhite='\033[1;37m'       # White

# Underline
export UBlack='\033[4;30m'       # Black
export URed='\033[4;31m'         # Red
export UGreen='\033[4;32m'       # Green
export UYellow='\033[4;33m'      # Yellow
export UBlue='\033[4;34m'        # Blue
export UPurple='\033[4;35m'      # Purple
export UCyan='\033[4;36m'        # Cyan
export UWhite='\033[4;37m'       # White

# Bold High Intensity
export BIBlack='\033[1;90m'      # Black
export BIRed='\033[1;91m'        # Red
export BIGreen='\033[1;92m'      # Green
export BIYellow='\033[1;93m'     # Yellow
export BIBlue='\033[1;94m'       # Blue
export BIPurple='\033[1;95m'     # Purple
export BICyan='\033[1;96m'       # Cyan
export BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
export On_IBlack='\033[0;100m'   # Black
export On_IRed='\033[0;101m'     # Red
export On_IGreen='\033[0;102m'   # Green
export On_IYellow='\033[0;103m'  # Yellow
export On_IBlue='\033[0;104m'    # Blue
export On_IPurple='\033[0;105m'  # Purple
export On_ICyan='\033[0;106m'    # Cyan
export On_IWhite='\033[0;107m'   # White


export RED=$(tput setaf 9)
export GREEN=$(tput setaf 10)
export YELLOW=$(tput setaf 11)
export BOLD=$(tput bold)
export NT=$(tput sgr0)

export GENERATOR_NAME="Git Push Server"
export GENERATOR_LINE_PREFIX=\[$GENERATOR_NAME]
EXIT_WRONG_PARAMS_ERROR_CODE=100
EXIT_DOCKER_NOT_INSTALLED_ERROR_CODE=101
EXIT_GNOME_TERMINAL_NOT_INSTALLED_ERROR_CODE=102
EXIT_NPM_INSTALL_ERROR_CODE=103
EXIT_WEBPACK_BUILD_INSTALL_ERROR_CODE=104
EXIT_MVNW_CHMOD_ERROR_CODE=105
EXIT_DELETE_TARGET_FOLDER_ERROR_CODE=106
EXIT_MVNW_CLEAN_ERROR_CODE=107
EXIT_SERVER_KEYSTORE_GEN_ERROR_CODE=108
EXIT_SERVER_KEYSTORE_COPY_ERROR_CODE=109
EXIT_GNOME_TERM_WEBPACK_RUN_ERROR_CODE=110
EXIT_MVNW_RUN_JAVA_SERVER_ERROR_CODE=111
EXIT_GNOME_TERM_DOCKER_RUN_ERROR_CODE=112

# arguments
# $1 - build/rebuild - rebuild cleans the target forcibly
# $2 - http/https
# $3 - webpack for hot module reload

# args
build_rebuild=$1
server_rest_api_mode=$2
webpack=$3

#constsnt strings
BUILD="build"
REBUILD="rebuild"
HTTP="http"
HTTPS="https"
HMR="hmr"
NOHMR="no-hmr"
CONFIGURE_NEW_KEYSTORE="configure-new-ks"
USE_CONFIGURED_KEYSTORE="use-configured-ks"
LOCALHOST="localhost"

# arguments
# $1 - build/rebuild - rebuild cleans the target directory, node_modules etc. forcibly
# $2 - http/https - back-end server protocol support - http or https
# $3 - hmr or nohmr - live hot-reload of front-end code changes or no hot module reload

# printf "${RED}This red color font${NC}\n"
# echo "${GREEN}This red color font${NT}"

#clear

echo "=========================================================================================================================================="
printf "        ${BIGreen}Welcome to $GENERATOR_NAME maven build and run script generated by ${BIGreen}AppBrahma - the baap of apps${NC}\n"
echo "  Sit back, relax, and sip a cuppa coffee while the dependencies are download, project is built, and server is run."
echo "  Unless the execution of this script stops, do not be bothered nor worried about any warnings or errors displayed during the execution ;-)"
echo "=========================================================================================================================================="

echo ""
printf "${BIYellow}$GENERATOR_LINE_PREFIX : You typed - \"./git-push-server-linux-prod-build-and-run-mvn.sh %s$*${NC}\"\n"
echo ""

# args check
if [ $# -lt 3 ]; then
	printf "${BIRed}Invalid or in-sufficient parameters supplied!${NC}\n"
    echo "Usage:"
  	printf "    ${BIYellow}./git-push-server-linux-prod-build-and-run-mvn.sh | ${BIGreen}build-action | server-protocol | front-end-hot-reload-action${NC}\n" | column -t -x -s "|"
    printf "    ${BIYellow}build-action${NC}|: Build or rebuild. Rebuild cleans the target forcibly. Mandatory argument. Allowed values - ${BIWhite}build${NC} or ${BIWhite}rebuild${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}server-protocol${NC}|: Backend server protocol. HTTP is NOT auto-redirected to HTTPS. HTTPS requires keystore infomation in next arguments. Mandatory argument. Allowed values - ${BIWhite}http${NC} or ${BIWhite}https${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}front-end-hot-module-reload-action${NC}|: Hot live reloading of front-end code changes. Mandatory argument. Allowed values are: ${BIWhite}hmr${NC} or ${BIWhite}no-hmr${NC}. \"hmr\" spawns a new terminal to run webpack for live hot reload of front-end code changes. \"nohmr\" does not spawn a terminal and server does not reflect any front-end code changes while running - requires re-run of this script for the server to reflect.\n" | column -t -c -x -s "|"
    echo ""
  	exit $EXIT_WRONG_PARAMS_ERROR_CODE
fi

# args validation
echo "$GENERATOR_LINE_PREFIX : Validating the values of arguments..."
if [[ $build_rebuild != $BUILD && $build_rebuild != $REBUILD ]]; then
	printf "${BIRed}Invalid value - \"$build_rebuild\" - for the first argument!${NC}\n"
	echo "  Usage:"
  	printf "    ${BIYellow}./git-push-server-linux-prod-build-and-run-mvn.sh | ${BIGreen}build-action | server-protocol | front-end-hot-reload-action${NC}\n" | column -t -x -s "|"
    printf "    ${BIYellow}build-action${NC}|: Build or rebuild. Rebuild cleans the target forcibly. Mandatory argument. Allowed values - ${BIWhite}build${NC} or ${BIWhite}rebuild${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}server-protocol${NC}|: Backend server protocol. HTTP is NOT auto-redirected to HTTPS. HTTPS requires keystore infomation in next arguments. Mandatory argument. Allowed values - ${BIWhite}http${NC} or ${BIWhite}https${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}front-end-hot-module-reload-action${NC}|: Hot live reloading of front-end code changes. Mandatory argument. Allowed values are: ${BIWhite}hmr${NC} or ${BIWhite}no-hmr${NC}. \"hmr\" spawns a new terminal to run webpack for live hot reload of front-end code changes. \"nohmr\" does not spawn a terminal and server does not reflect any front-end code changes while running - requires re-run of this script for the server to reflect.\n" | column -t -c -x -s "|"
    echo ""
  	exit $EXIT_WRONG_PARAMS_ERROR_CODE
fi

if [[ $server_rest_api_mode != $HTTP && $server_rest_api_mode != $HTTPS ]]; then
	printf "${BIRed}Invalid value - \"$server_rest_api_mode\" - for the second argument!${NC}\n"
	echo "  Usage:"
  	printf "    ${BIYellow}./git-push-server-linux-prod-build-and-run-mvn.sh | ${BIGreen}build-action | server-protocol | front-end-hot-reload-action${NC}\n" | column -t -x -s "|"
    printf "    ${BIYellow}build-action${NC}|: Build or rebuild. Rebuild cleans the target forcibly. Mandatory argument. Allowed values - ${BIWhite}build${NC} or ${BIWhite}rebuild${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}server-protocol${NC}|: Backend server protocol. HTTP is NOT auto-redirected to HTTPS. HTTPS requires keystore infomation in next arguments. Mandatory argument. Allowed values - ${BIWhite}http${NC} or ${BIWhite}https${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}front-end-hot-module-reload-action${NC}|: Hot live reloading of front-end code changes. Mandatory argument. Allowed values are: ${BIWhite}hmr${NC} or ${BIWhite}no-hmr${NC}. \"hmr\" spawns a new terminal to run webpack for live hot reload of front-end code changes. \"nohmr\" does not spawn a terminal and server does not reflect any front-end code changes while running - requires re-run of this script for the server to reflect.\n" | column -t -c -x -s "|"
    echo ""
  	exit $EXIT_WRONG_PARAMS_ERROR_CODE
fi

if [[ $webpack != $HMR && $webpack != $NOHMR ]]; then
	printf "${BIRed}Invalid value - \"$webpack\" - for the thrid argument!${NC}\n"
	echo "  Usage:"
  	printf "    ${BIYellow}./git-push-server-linux-prod-build-and-run-mvn.sh | ${BIGreen}build-action | server-protocol | front-end-hot-reload-action${NC}\n" | column -t -x -s "|"
    printf "    ${BIYellow}build-action${NC}|: Build or rebuild. Rebuild cleans the target forcibly. Mandatory argument. Allowed values - ${BIWhite}build${NC} or ${BIWhite}rebuild${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}server-protocol${NC}|: Backend server protocol. HTTP is NOT auto-redirected to HTTPS. HTTPS requires keystore infomation in next arguments. Mandatory argument. Allowed values - ${BIWhite}http${NC} or ${BIWhite}https${NC}.\n" | column -t -x -s "|"
    printf "    ${BIYellow}front-end-hot-module-reload-action${NC}|: Hot live reloading of front-end code changes. Mandatory argument. Allowed values are: ${BIWhite}hmr${NC} or ${BIWhite}no-hmr${NC}. \"hmr\" spawns a new terminal to run webpack for live hot reload of front-end code changes. \"nohmr\" does not spawn a terminal and server does not reflect any front-end code changes while running - requires re-run of this script for the server to reflect.\n" | column -t -c -x -s "|"
    echo ""
  	exit $EXIT_WRONG_PARAMS_ERROR_CODE
fi
echo "$GENERATOR_LINE_PREFIX : Values of arguments are valid. Moving ahead with other checks..."

echo "$GENERATOR_LINE_PREFIX : Performing pre-requisites checks..."
# gnome-terminal check
if [ "$webpack" == "$HMR" ]; then
    gnome_install_check=$(gnome-terminal -h 2>&1)
    if [ $? -gt 0 ]; then
        printf "${BIRed}$GENERATOR_LINE_PREFIX : gnome-terminal is not installed. This is needed for spawning a terminal for live hot module reload of front-end code changes. Please install gnome-terminal and retry running this script.${NC}\n"
        exit $EXIT_GNOME_TERMINAL_NOT_INSTALLED_ERROR_CODE
    else
        echo "$GENERATOR_LINE_PREFIX : Gnome terminal - needed for spawning live hot reload of front-end code changes - is installed. Moving ahead with other checks..."
    fi
fi

# docker installation check - conditional for non-h2 dbs
docker_install_check=$(docker-compose version 2>&1)
if [ $? -gt 0 ]; then
	printf "${BIRed}$GENERATOR_LINE_PREFIX : Docker-compose is not installed. This is needed for running database in the container. Please install docker compose and retry running this script.${NC}\n"
	exit $EXIT_DOCKER_NOT_INSTALLED_ERROR_CODE
else
    echo "$GENERATOR_LINE_PREFIX : Docker-compose needed for running database container is installed. Moving ahead with other checks..."
fi
echo "$GENERATOR_LINE_PREFIX : Pre-requisites checks completed."
#https pre-reqs
if [ "$server_rest_api_mode" == "$HTTPS" ]; then
    echo "$GENERATOR_LINE_PREFIX : You have chosen \"$HTTPS\" for back-end server protocol. A PKCS12 keystore with signed server certificate needs to be configured on the back-end server for enabling \"$HTTPS\"."
    echo "$GENERATOR_LINE_PREFIX : AppBrahma has already generated Brillium CA (non-public) signed certificate, PKCS12 keystore, and configured backend server spring boot tls profile for automatic deployment of keystore for the first time server use/run."
    echo "$GENERATOR_LINE_PREFIX : Alternatively, you can configure a new certificate keystore now."

    # prompt user for using configured appbrahma self-signed ks or to create a new keystore
    ks_option="Yes No"
    echo "$GENERATOR_LINE_PREFIX : Would you like to use already configured keystore? (This would be either AppBrahma configured or last configured by you, if this is not the first run of the script)"
    PS3='Please type the number shown above for selecting your option: '
    select ks_selection in $ks_option;
    do
        # echo ""
        echo "$GENERATOR_LINE_PREFIX : You have chosen \"$REPLY) $ks_selection\" as the option."
        if [[ "$ks_selection" != "" ]]; then
            break
        fi
    done
    if [ "$ks_selection" == "Yes" ]; then
        printf "${BIGreen}$GENERATOR_LINE_PREFIX : Please be aware that AppBrahma generated server certificate/keystore is issued by non-public Brillium CA which may require special certificate store/trust configurations on iOS and Android devices for enabling HTTPS access to this server from Apps running on these devices - especially Unimobile app you might have generated for this server by AppBrahma MVP generator.${NC}\n"
        echo ""
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue...${NT}"
    else
        echo "$GENERATOR_LINE_PREFIX : For configuring a new certificate keystore, you will now need to complete the below steps."
        echo ""
        echo "1.Obtain a digital certificate signed by a publicly known CA for the back-end server."
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue, when done...${NT}"
        echo ""
        printf "2.Generate PKCS12 type keystore from the signed certificate, server private key files and server alias etc. Ensure the files are placed in the same directory as you execute the command in to generate.\n"
        printf "Command with openSSL is - ${BIYellow}openssl pkcs12 -export -out appbrahma-server-ks.p12 -name <server_alias_used_in_cert_or_CSR> -passin pass:<server_private_key_password_used> -password pass:<password_for_generated_keystore -inkey <server_private_key_file_name> -in <CA_signed_server_cert_file_name>${NC}\n"
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue, when done...${NT}"
        echo ""
        printf "3.Ensure keystore file is named as ${BWhite}appbrahma-server-ks.p12${NC} and place it in ${BWhite}<backend_server_root>/src/main/resources/config/tls${NC}. If a file with the same name exists, replace it.\n"
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue, when done...${NT}"
        echo ""
        printf "4.Update this keystore related information in the spring tls profile file ${BWhite}<backend_server_root>/src/main/resources/config/application-tls.yml${NC} as below and save it:\n"
        echo "  - \"server.ssl.key-store-password\" key value with the password you have used to create the keystore in the previous steps"
        echo "  - \"server.ssl.key-alias\" key value with the server alias you have used to create the keystore in the previous steps"
        echo "$GENERATOR_LINE_PREFIX : Please ensure you have NOT modified any other information in this file before saving - knowingly or un-knowingly, for such inadvertent changes would result in server start-up failures."
        echo ""
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue, when done...${NT}"
    fi
fi
echo "$GENERATOR_LINE_PREFIX : Pre-requisites check completed successfully."

# as a pre-caution set the execute access permission to the mvnw script file
chmod_mvnw=$(chmod u+x ./mvnw 2>&1)
if [ $? -gt 0 ]; then
	printf "${BIRed}$GENERATOR_LINE_PREFIX : Error setting execute access permissions to mvnw.sh file. Error details are displayed below. Please do it manually using the command and re-run this script.${NC}\n"
	echo "$chmod_mvnw"
	exit $EXIT_MVNW_CHMOD_ERROR_CODE
fi

# build or rebuild
if [ "$build_rebuild" == "$REBUILD" ]; then
	echo "$GENERATOR_LINE_PREFIX : Re-building backend web server project..."
	delete_target=$(rm -rf target node_modules 2>&1)
	if [ $? -gt 0 ]; then
		printf "${BIRed}$GENERATOR_LINE_PREFIX : Error deleting the target and node_modules folders for rebuilding!${NC}\n"
        printf "${BIRed}Error details are displayed below. Please delete these folders manually and re-run this script.${NC}\n"
		echo "$delete_target"
		exit $EXIT_DELETE_TARGET_FOLDER_ERROR_CODE
	fi
	clean_mvnw=$(./mvnw clean)
	if [ $? -gt 0 ]; then
		printf "${BIRed}$GENERATOR_LINE_PREFIX : Error cleaning build assets for re-building!${NC}\n"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
		echo "$clean_mvnw"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
		exit $EXIT_MVNW_CLEAN_ERROR_CODE
	fi
else
    echo "$GENERATOR_LINE_PREFIX : Building backend web server project..."
fi
echo "$GENERATOR_LINE_PREFIX : Installing nodejs dependencies..."
apb_npm_install=$(npm install --force 2>&1)
if [ $? -gt 0 ]; then
	printf "${BIRed}$GENERATOR_LINE_PREFIX : Error installing node dependencies!${NC}\n"
    printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
	echo "$apb_npm_install"
    printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
	exit $EXIT_NPM_INSTALL_ERROR_CODE
fi
echo "$GENERATOR_LINE_PREFIX : Installed nodejs dependencies."

echo "$GENERATOR_LINE_PREFIX : Building server front-end..."
apb_build_webpack=$(npm run webapp:build 2>&1)
if [ $? -gt 0 ]; then
	printf "${BIRed}$GENERATOR_LINE_PREFIX : Error building server front-end!${NC}\n"
	printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
	echo "$apb_build_webpack"
    printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
	exit $EXIT_WEBPACK_BUILD_INSTALL_ERROR_CODE
fi
echo "$GENERATOR_LINE_PREFIX : Built server front-end."

# spawn docker terminal for mysql and run it, if not already running
docker_container_run_check=$(docker container inspect -f '{{.State.Status}}' git-push-server 2>&1)
# if [[ ! "$(docker container inspect -f '{{.State.Status}}' git-push-server )" == "running" ]]; then
if [[ ! "$docker_container_run_check" == "running" ]]; then
    printf "${BIGreen}$GENERATOR_LINE_PREFIX : Spawning a command terminal for running configured database server in docker container...${NC}\n"
    spawn_gnome_term_for_db=$(gnome-terminal --tab --title="AppBrahma Docker DB Terminal - git-push-server" -- bash -c 'printf "${BIGreen}$GENERATOR_LINE_PREFIX : Welcome to Docker DB Server for Git Push Server${NC}\n" && docker-compose -f src/main/docker/mysql.yml up --remove-orphans; exec bash' 2>&1)
    if [ $? -gt 0 ]; then
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error spawning command terminal or running configured db server!${NC}\n"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
        echo "$spawn_gnome_term_for_db"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
        exit $EXIT_GNOME_TERM_DOCKER_RUN_ERROR_CODE
    fi
    echo "$GENERATOR_LINE_PREFIX : Spawned a command terminal for running configured database server in docker container."
else
    echo "$GENERATOR_LINE_PREFIX : Found git-push-server docker container already running configured database server. Will connect to this DB server. Proceeding ahead."
fi

# build and run java server
if [ "$server_rest_api_mode" == "$HTTPS" ]; then
    # https
    echo "$GENERATOR_LINE_PREFIX : Now back-end server with \"$HTTPS\" support will be built and run in a spawned terminal..."
    echo ""
    read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue...${NT}"
    spawn_gnome_term_for_back_end_web_server=$(gnome-terminal --tab --title="AppBrahma Back-end Server Terminal - git-push-server" -- bash -c 'printf "${BIGreen}$GENERATOR_LINE_PREFIX : Welcome to Git Push Server Build and Run${NC}\n" && ./mvnw -Pdev,-webapp,tls; exec bash' 2>&1)
    if [ $? -gt 0 ]; then
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error spawning command terminal for running back-end server!${NC}\n"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
        echo "$spawn_gnome_term_for_back_end_web_server"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
        exit $EXIT_MVNW_RUN_JAVA_SERVER_ERROR_CODE
    fi
    echo "$GENERATOR_LINE_PREFIX : Spawned command terminal for building and running back-end server with \"$HTTPS\" support."
    echo "${GREEN}$GENERATOR_LINE_PREFIX : Please wait for the back-end server to be up and running in the spawned terminal.${NT}"
    echo ""
    read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key when the above is done...${NT}"

    # spawn webpack terminal for front-end hot module run
    if [ "$webpack" == "$HMR" ]; then
        echo "$GENERATOR_LINE_PREFIX : Spawning a command terminal to run webpack hot module reload for reflecting live front-end code changes with \"$HTTPS\" support..."
        echo ""
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue...${NT}"
        spawn_gnome_term_for_hmr=$(gnome-terminal --tab --title="AppBrahma Webpack Live HMR Terminal - git-push-server" -- bash -c 'printf "${BIGreen}$GENERATOR_LINE_PREFIX : Welcome to AppBrahma Webpack Live HMR for Git Push Server.${NC}\n" && npm run start-tls --host=localhost --disable-host-check ; exec bash' 2>&1)
        if [ $? -gt 0 ]; then
            printf "${BIRed}$GENERATOR_LINE_PREFIX : Error spawning command terminal or running webpack live hot module reload of front-end code changes!${NC}\n"
            printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
            echo "$spawn_gnome_term_for_hmr"
            printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
            exit $EXIT_GNOME_TERM_WEBPACK_RUN_ERROR_CODE
        fi
        echo "$GENERATOR_LINE_PREFIX : Spawned command terminal for running webpack."
        printf "${BIGreen}$GENERATOR_LINE_PREFIX : Please wait until webpack starts up fully and opens a browser with the server home page link.${NC}\n"
        echo ""
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key when the above is done...${NT}"
    fi
else
    # http
    echo "$GENERATOR_LINE_PREFIX : Now back-end server with \"$HTTP\" support will be built and run in a spawned terminal..."
    echo ""
    read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue...${NT}"
    spawn_gnome_term_for_back_end_web_server=$(gnome-terminal --tab --title="AppBrahma Back-end Server Terminal - git-push-server" -- bash -c 'printf "${BIGreen}$GENERATOR_LINE_PREFIX : Welcome to Git Push Server Build and Run${NC}\n" && ./mvnw -Pdev,-webapp; exec bash' 2>&1)
    if [ $? -gt 0 ]; then
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error spawning command terminal for running back-end server!${NC}\n"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
        echo "$spawn_gnome_term_for_back_end_web_server"
        printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
        exit $EXIT_MVNW_RUN_JAVA_SERVER_ERROR_CODE
    fi
    echo "$GENERATOR_LINE_PREFIX : Spawned command terminal for building and running back-end server with \"$HTTP\" support."
    echo "${GREEN}$GENERATOR_LINE_PREFIX : Please wait for the back-end server to be up and running in the spawned terminal.${NT}"
    echo ""
    read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key when the above is done...${NT}"

    # spawn webpack terminal for front-end hot module build or run
    if [ "$webpack" == "$HMR" ]; then
        echo "$GENERATOR_LINE_PREFIX : Spawning a command terminal to run webpack hot module reload for reflecting live front-end code changes with \"$HTTP\" support..."
        echo ""
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue...${NT}"
        spawn_gnome_term_for_hmr=$(gnome-terminal --tab --title="AppBrahma Webpack Live HMR Terminal - git-push-server" -- bash -c 'printf "${BIGreen}$GENERATOR_LINE_PREFIX : Welcome to Welcome AppBrahma Webpack Live HMR for Git Push Server.${NC}\n" && npm run start; exec bash' 2>&1)
        if [ $? -gt 0 ]; then
            printf "${BIRed}$GENERATOR_LINE_PREFIX : Error spawning command terminal or running webpack live hot module reload of front-end code changes!${NC}\n"
            printf "${BIRed}$GENERATOR_LINE_PREFIX : Error details are displayed below. Aborting the execution.${NC}\n"
            echo "$spawn_gnome_term_for_hmr"
            printf "${BIRed}$GENERATOR_LINE_PREFIX : Please retry running the script after fixing above reported errors.${NC}\n"
            exit $EXIT_GNOME_TERM_WEBPACK_RUN_ERROR_CODE
        fi
        echo "$GENERATOR_LINE_PREFIX : Spawned command terminal for webpack run."
        printf "${BIGreen}$GENERATOR_LINE_PREFIX : Please wait until webpack for live hot module reload of front-end code changes starts up and opens a browser with the server home page link.${NC}\n"
        echo ""
        read -p "${GREEN}${BOLD}$GENERATOR_LINE_PREFIX : Press any key to continue, after the above is done...${NT}"
    fi
fi

# display credentials for server log in
if [ "$webpack" == "$HMR" ]; then
    echo "$GENERATOR_LINE_PREFIX : Please use the below credentials for the back-end server login. Use the access URL displayed on the spawned webpack hot module reload server terminal for reflecting front-end code changes live."
    echo "$GENERATOR_LINE_PREFIX : Else use the URL displayed on spawned back-end server terminal."
else
    echo "$GENERATOR_LINE_PREFIX : Please use the below credentials for the back-end server login. Use the URL displayed on the spawned back-end server terminal."
fi
echo "  Admin user - Username: brahma, Password: brahma@appbrahma"
echo "  End user - Username: manasputhra, Password: manasputhra@appbrahma"
echo ""

# acknowledgement and best wishes
printf "${BIGreen}$GENERATOR_LINE_PREFIX : Wishing you best for faster quality development sprint cycles and go-live.${NC}\n"
printf "${BIGreen}$GENERATOR_LINE_PREFIX : Powered and brought to you by the passion, perseverance, perfection, and pursuit of efficiency by Brillium Technologies to transform the world through technology.${NC}\n"
printf "${BIGreen}$GENERATOR_LINE_PREFIX : Thank you for giving us the opportunity to serve you in going live quickly with your MVP by cutting down your development time and effort of the first runnable version of your full-stack product from months of team work to a few individual clicks.${NC}\n"
printf "${BIGreen}-Team AppBrahma${NC}\n"
echo ""
